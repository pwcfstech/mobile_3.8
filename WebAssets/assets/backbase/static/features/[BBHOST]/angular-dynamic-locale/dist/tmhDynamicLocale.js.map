{"version":3,"sources":[false,null,"false*","webpack:///angular-dynamic-locale/./src/tmhDynamicLocale.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","window","angular","config","$provide","makeStateful","$delegate","$stateful","decorator","constant","provider","STORAGE_KEY","loadScript","url","callback","errorCallback","$timeout","script","document","createElement","body","getElementsByTagName","removed","type","readyState","onreadystatechange","removeChild","onload","onerror","src","async","appendChild","loadLocale","localeUrl","$locale","localeId","$rootScope","$q","localeCache","overrideValues","oldObject","newObject","activeLocale","forEach","value","key","isArray","length","isObject","promiseCache","cachedLocale","deferred","defer","resolve","get","$evalAsync","$broadcast","storage","put","storageKey","promise","localInjector","injector","externalLocale","$apply","reject","defaultLocale","localeLocationPattern","storageFactory","useStorage","storageName","useCookieStorage","$get","$injector","interpolate","locale","tmhDynamicLocaleCache","localeLocation","initialLocale","set","$cacheFactory","run","noop"],"mappings":"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","file":"tmhDynamicLocale.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-dynamic-locale\"] = factory();\n\telse\n\t\troot[\"angular-dynamic-locale\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-dynamic-locale\"] = factory();\n\telse\n\t\troot[\"angular-dynamic-locale\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t'use strict';(function (window) {\n\t  'use strict';\n\t  angular.module('tmh.dynamicLocale', []).config(['$provide', function ($provide) {\n\t    function makeStateful($delegate) {\n\t      $delegate.$stateful = true;\n\t      return $delegate;\n\t    }\n\n\t    $provide.decorator('dateFilter', ['$delegate', makeStateful]);\n\t    $provide.decorator('numberFilter', ['$delegate', makeStateful]);\n\t    $provide.decorator('currencyFilter', ['$delegate', makeStateful]);\n\n\t  }]).\n\t  constant('tmhDynamicLocale.STORAGE_KEY', 'tmhDynamicLocale.locale').\n\t  provider('tmhDynamicLocale', ['tmhDynamicLocale.STORAGE_KEY', function (STORAGE_KEY) {\n\n\t    var defaultLocale,\n\t    localeLocationPattern = 'angular/i18n/angular-locale_{{locale}}.js',\n\t    storageFactory = 'tmhDynamicLocaleStorageCache',\n\t    storage,\n\t    storageKey = STORAGE_KEY,\n\t    promiseCache = {},\n\t    activeLocale;\n\n\t    /**\n\t                   * Loads a script asynchronously\n\t                   *\n\t                   * @param {string} url The url for the script\n\t                   @ @param {function) callback A function to be called once the script is loaded\n\t                   */\n\t    function loadScript(url, callback, errorCallback, $timeout) {\n\t      var script = document.createElement('script'),\n\t      body = document.getElementsByTagName('body')[0],\n\t      removed = false;\n\n\t      script.type = 'text/javascript';\n\t      if (script.readyState) {// IE\n\t        script.onreadystatechange = function () {\n\t          if (script.readyState === 'complete' ||\n\t          script.readyState === 'loaded') {\n\t            script.onreadystatechange = null;\n\t            $timeout(\n\t            function () {\n\t              if (removed) return;\n\t              removed = true;\n\t              body.removeChild(script);\n\t              callback();\n\t            }, 30, false);\n\t          }\n\t        };\n\t      } else {// Others\n\t        script.onload = function () {\n\t          if (removed) return;\n\t          removed = true;\n\t          body.removeChild(script);\n\t          callback();\n\t        };\n\t        script.onerror = function () {\n\t          if (removed) return;\n\t          removed = true;\n\t          body.removeChild(script);\n\t          errorCallback();\n\t        };\n\t      }\n\t      script.src = url;\n\t      script.async = false;\n\t      body.appendChild(script);\n\t    }\n\n\t    /**\n\t       * Loads a locale and replaces the properties from the current locale with the new locale information\n\t       *\n\t       * @param localeUrl The path to the new locale\n\t       * @param $locale The locale at the curent scope\n\t       */\n\t    function loadLocale(localeUrl, $locale, localeId, $rootScope, $q, localeCache, $timeout) {\n\n\t      function overrideValues(oldObject, newObject) {\n\t        if (activeLocale !== localeId) {\n\t          return;\n\t        }\n\t        angular.forEach(oldObject, function (value, key) {\n\t          if (!newObject[key]) {\n\t            delete oldObject[key];\n\t          } else if (angular.isArray(newObject[key])) {\n\t            oldObject[key].length = newObject[key].length;\n\t          }\n\t        });\n\t        angular.forEach(newObject, function (value, key) {\n\t          if (angular.isArray(newObject[key]) || angular.isObject(newObject[key])) {\n\t            if (!oldObject[key]) {\n\t              oldObject[key] = angular.isArray(newObject[key]) ? [] : {};\n\t            }\n\t            overrideValues(oldObject[key], newObject[key]);\n\t          } else {\n\t            oldObject[key] = newObject[key];\n\t          }\n\t        });\n\t      }\n\n\n\t      if (promiseCache[localeId]) return promiseCache[localeId];\n\n\t      var cachedLocale,\n\t      deferred = $q.defer();\n\t      if (localeId === activeLocale) {\n\t        deferred.resolve($locale);\n\t      } else if (cachedLocale = localeCache.get(localeId)) {\n\t        activeLocale = localeId;\n\t        $rootScope.$evalAsync(function () {\n\t          overrideValues($locale, cachedLocale);\n\t          $rootScope.$broadcast('$localeChangeSuccess', localeId, $locale);\n\t          storage.put(storageKey, localeId);\n\t          deferred.resolve($locale);\n\t        });\n\t      } else {\n\t        activeLocale = localeId;\n\t        promiseCache[localeId] = deferred.promise;\n\t        loadScript(localeUrl, function () {\n\t          // Create a new injector with the new locale\n\t          var localInjector = angular.injector(['ngLocale']),\n\t          externalLocale = localInjector.get('$locale');\n\n\t          overrideValues($locale, externalLocale);\n\t          localeCache.put(localeId, externalLocale);\n\t          delete promiseCache[localeId];\n\n\t          $rootScope.$apply(function () {\n\t            $rootScope.$broadcast('$localeChangeSuccess', localeId, $locale);\n\t            storage.put(storageKey, localeId);\n\t            deferred.resolve($locale);\n\t          });\n\t        }, function () {\n\t          delete promiseCache[localeId];\n\n\t          $rootScope.$apply(function () {\n\t            if (activeLocale === localeId) activeLocale = $locale.id;\n\t            $rootScope.$broadcast('$localeChangeError', localeId);\n\t            deferred.reject(localeId);\n\t          });\n\t        }, $timeout);\n\t      }\n\t      return deferred.promise;\n\t    }\n\n\t    this.localeLocationPattern = function (value) {\n\t      if (value) {\n\t        localeLocationPattern = value;\n\t        return this;\n\t      } else {\n\t        return localeLocationPattern;\n\t      }\n\t    };\n\n\t    this.useStorage = function (storageName) {\n\t      storageFactory = storageName;\n\t    };\n\n\t    this.useCookieStorage = function () {\n\t      this.useStorage('$cookieStore');\n\t    };\n\n\t    this.defaultLocale = function (value) {\n\t      defaultLocale = value;\n\t    };\n\n\t    this.storageKey = function (value) {\n\t      if (value) {\n\t        storageKey = value;\n\t        return this;\n\t      } else {\n\t        return storageKey;\n\t      }\n\t    };\n\n\t    this.$get = ['$rootScope', '$injector', '$interpolate', '$locale', '$q', 'tmhDynamicLocaleCache', '$timeout', function ($rootScope, $injector, interpolate, locale, $q, tmhDynamicLocaleCache, $timeout) {\n\t      var localeLocation = interpolate(localeLocationPattern);\n\n\t      storage = $injector.get(storageFactory);\n\t      $rootScope.$evalAsync(function () {\n\t        var initialLocale;\n\t        if (initialLocale = storage.get(storageKey) || defaultLocale) {\n\t          loadLocale(localeLocation({ locale: initialLocale }), locale, initialLocale, $rootScope, $q, tmhDynamicLocaleCache, $timeout);\n\t        }\n\t      });\n\t      return {\n\t        /**\n\t                * @ngdoc method\n\t                * @description\n\t                * @param {string=} value Sets the locale to the new locale. Changing the locale will trigger\n\t                *    a background task that will retrieve the new locale and configure the current $locale\n\t                *    instance with the information from the new locale\n\t                */\n\t        set: function set(value) {\n\t          return loadLocale(localeLocation({ locale: value }), locale, value, $rootScope, $q, tmhDynamicLocaleCache, $timeout);\n\t        },\n\t        /**\n\t            * @ngdoc method\n\t            * @description Returns the configured locale\n\t            */\n\t        get: function get() {\n\t          return activeLocale;\n\t        } };\n\n\t    }];\n\t  }]).provider('tmhDynamicLocaleCache', function () {\n\t    this.$get = ['$cacheFactory', function ($cacheFactory) {\n\t      return $cacheFactory('tmh.dynamicLocales');\n\t    }];\n\t  }).provider('tmhDynamicLocaleStorageCache', function () {\n\t    this.$get = ['$cacheFactory', function ($cacheFactory) {\n\t      return $cacheFactory('tmh.dynamicLocales.store');\n\t    }];\n\t  }).run(['tmhDynamicLocale', angular.noop]);\n\t})(window);\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// tmhDynamicLocale.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 170d08ad4010e9ac2a79","(function(window) {\n'use strict';\nangular.module('tmh.dynamicLocale', []).config(['$provide', function ($provide) {\n  function makeStateful($delegate) {\n    $delegate.$stateful = true;\n    return $delegate;\n  }\n\n  $provide.decorator('dateFilter', ['$delegate', makeStateful]);\n  $provide.decorator('numberFilter', ['$delegate', makeStateful]);\n  $provide.decorator('currencyFilter', ['$delegate', makeStateful]);\n\n}])\n.constant('tmhDynamicLocale.STORAGE_KEY', 'tmhDynamicLocale.locale')\n.provider('tmhDynamicLocale', ['tmhDynamicLocale.STORAGE_KEY', function(STORAGE_KEY) {\n\n  var defaultLocale,\n    localeLocationPattern = 'angular/i18n/angular-locale_{{locale}}.js',\n    storageFactory = 'tmhDynamicLocaleStorageCache',\n    storage,\n    storageKey = STORAGE_KEY,\n    promiseCache = {},\n    activeLocale;\n\n  /**\n   * Loads a script asynchronously\n   *\n   * @param {string} url The url for the script\n   @ @param {function) callback A function to be called once the script is loaded\n   */\n  function loadScript(url, callback, errorCallback, $timeout) {\n    var script = document.createElement('script'),\n      body = document.getElementsByTagName('body')[0],\n      removed = false;\n\n    script.type = 'text/javascript';\n    if (script.readyState) { // IE\n      script.onreadystatechange = function () {\n        if (script.readyState === 'complete' ||\n            script.readyState === 'loaded') {\n          script.onreadystatechange = null;\n          $timeout(\n            function () {\n              if (removed) return;\n              removed = true;\n              body.removeChild(script);\n              callback();\n            }, 30, false);\n        }\n      };\n    } else { // Others\n      script.onload = function () {\n        if (removed) return;\n        removed = true;\n        body.removeChild(script);\n        callback();\n      };\n      script.onerror = function () {\n        if (removed) return;\n        removed = true;\n        body.removeChild(script);\n        errorCallback();\n      };\n    }\n    script.src = url;\n    script.async = false;\n    body.appendChild(script);\n  }\n\n  /**\n   * Loads a locale and replaces the properties from the current locale with the new locale information\n   *\n   * @param localeUrl The path to the new locale\n   * @param $locale The locale at the curent scope\n   */\n  function loadLocale(localeUrl, $locale, localeId, $rootScope, $q, localeCache, $timeout) {\n\n    function overrideValues(oldObject, newObject) {\n      if (activeLocale !== localeId) {\n        return;\n      }\n      angular.forEach(oldObject, function(value, key) {\n        if (!newObject[key]) {\n          delete oldObject[key];\n        } else if (angular.isArray(newObject[key])) {\n          oldObject[key].length = newObject[key].length;\n        }\n      });\n      angular.forEach(newObject, function(value, key) {\n        if (angular.isArray(newObject[key]) || angular.isObject(newObject[key])) {\n          if (!oldObject[key]) {\n            oldObject[key] = angular.isArray(newObject[key]) ? [] : {};\n          }\n          overrideValues(oldObject[key], newObject[key]);\n        } else {\n          oldObject[key] = newObject[key];\n        }\n      });\n    }\n\n\n    if (promiseCache[localeId]) return promiseCache[localeId];\n\n    var cachedLocale,\n      deferred = $q.defer();\n    if (localeId === activeLocale) {\n      deferred.resolve($locale);\n    } else if ((cachedLocale = localeCache.get(localeId))) {\n      activeLocale = localeId;\n      $rootScope.$evalAsync(function() {\n        overrideValues($locale, cachedLocale);\n        $rootScope.$broadcast('$localeChangeSuccess', localeId, $locale);\n        storage.put(storageKey, localeId);\n        deferred.resolve($locale);\n      });\n    } else {\n      activeLocale = localeId;\n      promiseCache[localeId] = deferred.promise;\n      loadScript(localeUrl, function () {\n        // Create a new injector with the new locale\n        var localInjector = angular.injector(['ngLocale']),\n          externalLocale = localInjector.get('$locale');\n\n        overrideValues($locale, externalLocale);\n        localeCache.put(localeId, externalLocale);\n        delete promiseCache[localeId];\n\n        $rootScope.$apply(function () {\n          $rootScope.$broadcast('$localeChangeSuccess', localeId, $locale);\n          storage.put(storageKey, localeId);\n          deferred.resolve($locale);\n        });\n      }, function () {\n        delete promiseCache[localeId];\n\n        $rootScope.$apply(function () {\n          if (activeLocale === localeId) activeLocale = $locale.id;\n          $rootScope.$broadcast('$localeChangeError', localeId);\n          deferred.reject(localeId);\n        });\n      }, $timeout);\n    }\n    return deferred.promise;\n  }\n\n  this.localeLocationPattern = function(value) {\n    if (value) {\n      localeLocationPattern = value;\n      return this;\n    } else {\n      return localeLocationPattern;\n    }\n  };\n\n  this.useStorage = function(storageName) {\n    storageFactory = storageName;\n  };\n\n  this.useCookieStorage = function() {\n    this.useStorage('$cookieStore');\n  };\n\n  this.defaultLocale = function (value) {\n    defaultLocale = value;\n  };\n\n  this.storageKey = function (value) {\n    if (value) {\n      storageKey = value;\n      return this;\n    } else {\n      return storageKey;\n    }\n  };\n\n  this.$get = ['$rootScope', '$injector', '$interpolate', '$locale', '$q', 'tmhDynamicLocaleCache', '$timeout', function($rootScope, $injector, interpolate, locale, $q, tmhDynamicLocaleCache, $timeout) {\n    var localeLocation = interpolate(localeLocationPattern);\n\n    storage = $injector.get(storageFactory);\n    $rootScope.$evalAsync(function () {\n      var initialLocale;\n      if ((initialLocale = (storage.get(storageKey) || defaultLocale))) {\n        loadLocale(localeLocation({locale: initialLocale}), locale, initialLocale, $rootScope, $q, tmhDynamicLocaleCache, $timeout);\n      }\n    });\n    return {\n      /**\n       * @ngdoc method\n       * @description\n       * @param {string=} value Sets the locale to the new locale. Changing the locale will trigger\n       *    a background task that will retrieve the new locale and configure the current $locale\n       *    instance with the information from the new locale\n       */\n      set: function(value) {\n        return loadLocale(localeLocation({locale: value}), locale, value, $rootScope, $q, tmhDynamicLocaleCache, $timeout);\n      },\n      /**\n       * @ngdoc method\n       * @description Returns the configured locale\n       */\n      get: function() {\n        return activeLocale;\n      }\n    };\n  }];\n}]).provider('tmhDynamicLocaleCache', function() {\n  this.$get = ['$cacheFactory', function($cacheFactory) {\n    return $cacheFactory('tmh.dynamicLocales');\n  }];\n}).provider('tmhDynamicLocaleStorageCache', function() {\n  this.$get = ['$cacheFactory', function($cacheFactory) {\n    return $cacheFactory('tmh.dynamicLocales.store');\n  }];\n}).run(['tmhDynamicLocale', angular.noop]);\n}(window));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tmhDynamicLocale.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}
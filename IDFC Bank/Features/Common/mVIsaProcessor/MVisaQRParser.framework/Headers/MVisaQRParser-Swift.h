// Generated by Apple Swift version 2.3 (swiftlang-800.10.13 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSCharacterSet (SWIFT_EXTENSION(MVisaQRParser))
@end


SWIFT_CLASS("_TtC13MVisaQRParser10QRCodeData")
@interface QRCodeData : NSObject
@property (nonatomic, copy) NSString * _Nullable mVisaMerchantID;
@property (nonatomic, copy) NSString * _Nullable mVisaMerchantPAN;
@property (nonatomic, copy) NSString * _Nullable merchantName;
@property (nonatomic, copy) NSString * _Nullable merchantCategoryCode;
@property (nonatomic, copy) NSString * _Nullable cityName;
@property (nonatomic, copy) NSString * _Nullable countryCode;
@property (nonatomic, copy) NSString * _Nullable currencyCode;
@property (nonatomic, copy) NSString * _Nullable transactionAmount;
@property (nonatomic, copy) NSString * _Nullable primaryID;
@property (nonatomic, copy) NSString * _Nullable secondaryID;
@property (nonatomic, copy) NSString * _Nullable tipAndFeeIndicator;
@property (nonatomic, copy) NSString * _Nullable convenienceFeeAmount;
@property (nonatomic, copy) NSString * _Nullable convenienceFeePercentage;
@property (nonatomic, copy) NSString * _Nullable payloadFormatIndicator;
@property (nonatomic, copy) NSString * _Nullable pointOfInitiation;
@property (nonatomic, copy) NSString * _Nullable postalCode;
@property (nonatomic, copy) NSString * _Nullable masterCardPAN1;
@property (nonatomic, copy) NSString * _Nullable masterCardPAN2;
@property (nonatomic, copy) NSString * _Nullable npciid1;
@property (nonatomic, copy) NSString * _Nullable npciid2;
@property (nonatomic, copy) NSString * _Nullable crc;
@property (nonatomic, copy) NSString * _Nullable tag03;
@property (nonatomic, copy) NSString * _Nullable tag08;
@property (nonatomic, copy) NSString * _Nullable tag09;
@property (nonatomic, copy) NSString * _Nullable tag10;
@property (nonatomic, copy) NSString * _Nullable tag11;
@property (nonatomic, copy) NSString * _Nullable tag12;
@property (nonatomic, copy) NSString * _Nullable tag13;
@property (nonatomic, copy) NSString * _Nullable tag14;
@property (nonatomic, copy) NSString * _Nullable tag15;
@property (nonatomic, copy) NSString * _Nullable additionalDataField;
@property (nonatomic, copy) NSString * _Nullable billID;
@property (nonatomic, copy) NSString * _Nullable mobileNumber;
@property (nonatomic, copy) NSString * _Nullable storeID;
@property (nonatomic, copy) NSString * _Nullable loyaltyNumber;
@property (nonatomic, copy) NSString * _Nullable referenceID;
@property (nonatomic, copy) NSString * _Nullable consumerID;
@property (nonatomic, copy) NSString * _Nullable terminalID;
@property (nonatomic, copy) NSString * _Nullable purpose;
@property (nonatomic, copy) NSString * _Nullable additionalConsumerDataRequest;
@property (nonatomic, copy) NSString * _Nullable addDataMasterCard1;
@property (nonatomic, copy) NSString * _Nullable addDataMasterCard2;
@property (nonatomic, copy) NSString * _Nullable addDataNpci1;
@property (nonatomic, copy) NSString * _Nullable addDataNpci2;
@property (nonatomic, copy) NSString * _Nullable tagSixtyTwo10;
@property (nonatomic, copy) NSString * _Nullable tagSixtyTwo15;
@property (nonatomic, copy) NSString * _Nullable tagSixtyTwo16;
@property (nonatomic, copy) NSString * _Nullable tagSixtyTwo17;
@property (nonatomic, copy) NSString * _Nullable tagSixtyTwo18;
@property (nonatomic, copy) NSString * _Nullable tagSixtyTwo19;
@property (nonatomic, copy) NSString * _Nullable tagSixtyTwo20;
@property (nonatomic, copy) NSString * _Nullable tagSixtyTwo21;
@property (nonatomic, copy) NSString * _Nullable tagSixtyTwo22;
@property (nonatomic) BOOL isPrimaryIDMandatory;
@property (nonatomic) BOOL isSecondaryIDMandatory;
@property (nonatomic, copy) NSString * _Nullable primaryIDLength;
@property (nonatomic, copy) NSString * _Nullable secondaryIDLength;
@property (nonatomic) BOOL isBillIDMandatory;
@property (nonatomic) BOOL isMobileNumberMandatory;
@property (nonatomic) BOOL isStoreIDMandatory;
@property (nonatomic) BOOL isLoyaltyNumberMandatory;
@property (nonatomic) BOOL isReferenceIDMandatory;
@property (nonatomic) BOOL isConsumerIDMandatory;
@property (nonatomic) BOOL isTerminalIDMandatory;
@property (nonatomic) BOOL isPurposeMandatory;
@property (nonatomic) BOOL isAdditonalConsumerDataRequestMandatory;
@property (nonatomic) BOOL isAddDataMasterCard1Mandatory;
@property (nonatomic) BOOL isAddDataMasterCard2Mandatory;
@property (nonatomic) BOOL isAddDataNpci1Mandatory;
@property (nonatomic) BOOL isAddDataNpci2Mandatory;
@property (nonatomic, readonly, copy) NSString * _Nonnull jsonOutput;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13MVisaQRParser11QRCodeError")
@interface QRCodeError : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull errorCodes;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class QRCodeParserResponse;


/// The QRCodeParser class provides sync and async methods to parse QR code string all the available methods are class level.
///
/// To parse QR Code, call class method parseQRData: with required parameter.
SWIFT_CLASS("_TtC13MVisaQRParser12QRCodeParser")
@interface QRCodeParser : NSObject

/// Parse QR code string asynchronously and provide QRCodeParserResponse object with parsed data and error object in completionHandler block.
///
/// \param qrCodeString QR code string which need to be parsed.
///
/// \param completionHandler A block object containing the QRCodeParserResponse object with parsed data.
/// QRCodeParserResponse has 2 variables, qrCodeData of type QRCodeData which has parsed QR data and qrCodeError of type QRCodeError which has error information.
/// if qrCodeError is nil means parsing is successfully done and qrCodeData will have parsed data.
/// If qrCodeError is not nil means QR data has some error and qrCodeError.errorCodes will provide array of error codes.
+ (void)parseQRDataWithQrCodeString:(NSString * _Nonnull)qrCodeStr completionHandler:(void (^ _Nonnull)(QRCodeParserResponse * _Nullable))completionHandler;

/// Parse QR code string and provide QRCodeParserResponse object with parsed data and error object.
///
/// <ul><li>Return QRCodeParserResponse object with parsed data.
/// QRCodeParserResponse has 2 variables, qrCodeData of type QRCodeData which has parsed QR data and qrCodeError of type QRCodeError which has error information.
/// if qrCodeError is nil, which means parsing is successfully done and qrCodeData will have parsed data.
/// If qrCodeError is not nil which means QR data has some error and qrCodeError.errorCodes will provide array of error codes.</li></ul>
/// \param qrCodeString QR code string which need to be parsed.
+ (QRCodeParserResponse * _Nonnull)parseQRDataWithQrCodeString:(NSString * _Nonnull)qrCodeStr;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13MVisaQRParser20QRCodeParserResponse")
@interface QRCodeParserResponse : NSObject
@property (nonatomic, readonly, strong) QRCodeData * _Nullable qrCodeData;
@property (nonatomic, readonly, strong) QRCodeError * _Nullable qrCodeError;
@end

#pragma clang diagnostic pop

{"version":3,"sources":[false,null,"false*","webpack:///example-test/./scripts/main.js","false**","false***","false****","webpack:///example-test/./scripts/model.js","false*****","false******","false*******"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_8__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","name","base","users","deps","createModule","undefined","webpackPolyfill","deprecate","paths","children","idfcConstants","idfcHandler","$","ContactsModel","$http","orderByFilter","httpService","lpCoreUtils","lpDefaultProfileImage","config","defaults","locale","contactListEndpoint","contacts","contactDataCreateServiceEndpoint","contactDataCreate","contactDataModifyServiceEndpoint","contactDataModify","contactDetailsServiceEndpoint","contactDetails","metaDataEndpoint","metaData","bankServiceEndpoint","bankServiceDetails","databaseServiceEndpoint","databaseServiceDetails","generateOTPServiceEndPoint","generateOTPDetails","rsaAnalyzeServiceEndPoint","rsaAnalyzeService","contactDetailsData","self","banksList","ifscList","countryCodesList","lazyload","loadContacts","prototype","generateOTP","value","resendOTP","generateOTPServiceURL","resolvePortalPlaceholders","postData","param","xhr","method","url","data","headers","Accept","Content-Type","checkDailyAddLimit","databaseService","getInstance","endpoint","urlVars","requestId","read","loadBanksList","bankService","bizObjId","success","loadCountryCodesList","errorSpin","cDate","Date","servicEndPoint","request","get","loading","currentContact","transactionName","length","preprocessContacts","activeContacts","forEach","contact","status","push","error","cd","checkTimeout","message","statusText","loadContactDetails","contactUUID","isModified","selected","currentDetails","branchAdd","accountType","ifscCode","bankName","BENEFICIARY_OWN_BANK_NAME","transferLimit","email","phone","detailsLoaded","cDetailsServiceEndPoint","params","contactId","newContacts","createContact","valid","isRSA","challengeValue","verifyData","transaction","i","challengeQuestions","eval","challengeQuesAnswers","credentialType","contactDataCreateService","partyId","devicePrint","xhrContactUpdate","create","detailsCallback","refreshModel","sendXhrRequest","createCounterParty","buildQueryString","updateContact","currentId","cleanData","allowedFields","obj","result","key","fieldName","addEmptyFields","contactDataModifyService","contactFields","cleanContactData","contactCallback","index","deleteContact","noContactsFound","callback","isFunction","selectContact","disableSelection","idx","indexOf","moduleState","findByName","find","$inject"],"mappings":"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","file":"scripts/main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"module-users\"), require(\"idfccommon\"), require(\"idfcerror\"), require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"module-users\", \"idfccommon\", \"idfcerror\", \"jquery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"example-test\"] = factory(require(\"base\"), require(\"module-users\"), require(\"idfccommon\"), require(\"idfcerror\"), require(\"jquery\"));\n\telse\n\t\troot[\"example-test\"] = factory(root[\"base\"], root[\"module-users\"], root[\"idfccommon\"], root[\"idfcerror\"], root[\"jquery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"module-users\"), require(\"idfccommon\"), require(\"idfcerror\"), require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"module-users\", \"idfccommon\", \"idfcerror\", \"jquery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"example-test\"] = factory(require(\"base\"), require(\"module-users\"), require(\"idfccommon\"), require(\"idfcerror\"), require(\"jquery\"));\n\telse\n\t\troot[\"example-test\"] = factory(root[\"base\"], root[\"module-users\"], root[\"idfccommon\"], root[\"idfcerror\"], root[\"jquery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict'; /**\n\t               *  ----------------------------------------------------------------\n\t               *  Copyright © Backbase B.V.\n\t               *  ----------------------------------------------------------------\n\t               *  Author : Backbase R&D - Amsterdam - New York\n\t               *  Filename : main.js\n\t               *  Description:\n\t               *  Main File Module Contacts\n\t               *  ----------------------------------------------------------------\n\t               */\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    module.name = 'module-contacts';\n\n\t    var base = __webpack_require__(3);\n\t    var users = __webpack_require__(4);\n\n\t    var deps = [\n\t    users.name];\n\n\n\t    module.exports = base.createModule(module.name, deps).\n\t    factory(__webpack_require__(5));\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t\t'use strict';\n\t\tvar idfcConstants = __webpack_require__(6).idfcConstants;\n\t\tvar idfcHandler = __webpack_require__(7);\n\t\tvar $ = __webpack_require__(8);\n\n\t\t// @ngInject\n\t\texports.ContactsModel = function ($http, orderByFilter, httpService, lpCoreUtils,\n\t\tlpDefaultProfileImage) {\n\t\t\t/**\n\t                          * Contacts service constructor\n\t                          *\n\t                          * @param config\n\t                          * @constructor\n\t                          */\n\t\t\tvar ContactsModel = function ContactsModel(config) {\n\t\t\t\tconfig = config || {};\n\t\t\t\tthis.defaults = {\n\t\t\t\t\tlocale: config.locale,\n\t\t\t\t\tcontactListEndpoint: config.contacts,\n\t\t\t\t\tcontactDataCreateServiceEndpoint: config.contactDataCreate,\n\t\t\t\t\tcontactDataModifyServiceEndpoint: config.contactDataModify,\n\t\t\t\t\tcontactDetailsServiceEndpoint: config.contactDetails,\n\t\t\t\t\tmetaDataEndpoint: config.metaData,\n\t\t\t\t\tbankServiceEndpoint: config.bankServiceDetails,\n\t\t\t\t\tdatabaseServiceEndpoint: config.databaseServiceDetails,\n\t\t\t\t\tgenerateOTPServiceEndPoint: config.generateOTPDetails,\n\t\t\t\t\trsaAnalyzeServiceEndPoint: config.rsaAnalyzeService };\n\n\n\t\t\t\tthis.locale = config.locale;\n\n\t\t\t\tif (config.contactDetails) {\n\t\t\t\t\tthis.contactDetailsData = [];\n\t\t\t\t}\n\n\t\t\t\tself.contacts = [];\n\t\t\t\tself.banksList = [];\n\t\t\t\tself.ifscList = [];\n\t\t\t\tself.countryCodesList = [];\n\n\t\t\t\tif (!config.lazyload) {\n\t\t\t\t\tthis.loadContacts();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tContactsModel.prototype.generateOTP = function (value) {\n\t\t\t\tvar resendOTP = null;\n\t\t\t\tvar self = this;\n\n\t\t\t\tvar generateOTPServiceURL = lpCoreUtils.resolvePortalPlaceholders(\n\t\t\t\tthis.defaults.generateOTPServiceEndPoint);\n\n\t\t\t\tif (value === 'resend') {\n\t\t\t\t\tresendOTP = true;\n\t\t\t\t} else {\n\t\t\t\t\tresendOTP = false;\n\t\t\t\t}\n\t\t\t\tvar postData = {\n\t\t\t\t\t'resendOTP': resendOTP };\n\n\n\t\t\t\tpostData = $.param(postData || {});\n\n\t\t\t\tvar xhr = $http({\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\turl: generateOTPServiceURL,\n\t\t\t\t\tdata: postData,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded;' } });\n\n\n\n\t\t\t\treturn xhr;\n\t\t\t};\n\n\t\t\t// Check for the beneficiary daily add limit\n\t\t\tContactsModel.prototype.checkDailyAddLimit = function () {\n\t\t\t\tvar self = this;\n\n\t\t\t\tself.databaseService = httpService.getInstance({\n\t\t\t\t\tendpoint: this.defaults.databaseServiceEndpoint,\n\t\t\t\t\turlVars: {\n\t\t\t\t\t\trequestId: 'dailyCount' } });\n\n\n\n\t\t\t\tvar xhr = self.databaseService.read();\n\n\t\t\t\treturn xhr;\n\t\t\t};\n\n\t\t\t// Load Bank Names List\n\t\t\tContactsModel.prototype.loadBanksList = function () {\n\t\t\t\tvar self = this;\n\n\t\t\t\tself.bankService = httpService.getInstance({\n\t\t\t\t\tendpoint: this.defaults.bankServiceEndpoint,\n\t\t\t\t\turlVars: {\n\t\t\t\t\t\trequestId: 'banksList',\n\t\t\t\t\t\tbizObjId: '' } });\n\n\n\n\t\t\t\tvar xhr = self.bankService.read();\n\n\t\t\t\txhr.success(function (data) {\n\t\t\t\t\tif (data && data !== 'null') {\n\t\t\t\t\t\tself.banksList = data.banksList;\n\t\t\t\t\t\tself.ifscList = data.ifscList;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.banksList = [];\n\t\t\t\t\t\tself.ifscList = [];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn xhr;\n\t\t\t};\n\n\t\t\t/**\n\t      * Load country codes\n\t      */\n\t\t\tContactsModel.prototype.loadCountryCodesList = function () {\n\t\t\t\tvar self = this;\n\n\t\t\t\tself.bankService = httpService.getInstance({\n\t\t\t\t\tendpoint: this.defaults.bankServiceEndpoint,\n\t\t\t\t\turlVars: {\n\t\t\t\t\t\trequestId: 'countryCodesList',\n\t\t\t\t\t\tbizObjId: '' } });\n\n\n\n\t\t\t\tvar xhr = self.bankService.read();\n\n\t\t\t\txhr.success(function (data) {\n\t\t\t\t\tif (data && data !== 'null') {\n\t\t\t\t\t\tself.countryCodesList = data.countryCodesList;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.countryCodesList = [];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn xhr;\n\t\t\t};\n\n\t\t\t/**\n\t      * Load contacts\n\t      */\n\t\t\tContactsModel.prototype.loadContacts = function () {\n\t\t\t\tvar self = this;\n\t\t\t\tself.errorSpin = true;\n\t\t\t\tvar cDate = new Date();\n\t\t\t\tvar servicEndPoint = this.defaults.contactListEndpoint + '&cParam=' + cDate;\n\t\t\t\tvar request = $http.get(servicEndPoint);\n\t\t\t\tthis.loading = true;\n\n\t\t\t\trequest.success(function (data) {\n\t\t\t\t\tself.errorSpin = false;\n\t\t\t\t\tif (data && data !== 'null') {\n\t\t\t\t\t\t// Set the id of the recently added contact to\n\t\t\t\t\t\t// currentContact\n\t\t\t\t\t\tif (self.currentContact &&\n\t\t\t\t\t\tself.transactionName === 'AddBeneficiary') {\n\t\t\t\t\t\t\tself.currentContact = data[data.length - 1];\n\t\t\t\t\t\t\tself.currentContact.id = data[data.length - 1].id;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.contacts = self.preprocessContacts(data);\n\t\t\t\t\t\t// Filter out only the ACTIVE contents\n\t\t\t\t\t\tself.activeContacts = [];\n\t\t\t\t\t\tlpCoreUtils.forEach(self.contacts, function (contact) {\n\t\t\t\t\t\t\tif (contact && contact.status === 'ACTIVE') {\n\t\t\t\t\t\t\t\tself.activeContacts.push(contact);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tself.contacts = self.activeContacts;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.contacts = [];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\trequest.error(function (error) {\n\t\t\t\t\tself.errorSpin = false;\n\t\t\t\t\tif (error.cd) {\n\t\t\t\t\t\t// Redirect to login page if session timed out\n\t\t\t\t\t\tidfcHandler.checkTimeout(error);\n\t\t\t\t\t}\n\t\t\t\t\tself.error = {\n\t\t\t\t\t\tmessage: error.statusText };\n\n\t\t\t\t});\n\t\t\t\trequest['finally'](function () {\n\t\t\t\t\tself.loading = false;\n\t\t\t\t});\n\n\t\t\t\treturn request;\n\t\t\t};\n\n\t\t\t/**\n\t      * Load details\n\t     *\n\t      * @returns {*}\n\t      */\n\t\t\tContactsModel.prototype.loadContactDetails = function (contactUUID, isModified) {\n\t\t\t\tvar self = this;\n\t\t\t\t// Focus on the selected contactq\n\t\t\t\tif (self.selected && contactUUID) {\n\t\t\t\t\tself.selected = contactUUID;\n\t\t\t\t}\n\t\t\t\t// check if contact details exist on clientside\n\t\t\t\tif (this.contactDetailsData.length > 0) {\n\t\t\t\t\tlpCoreUtils.\n\t\t\t\t\tforEach(\n\t\t\t\t\tthis.contactDetailsData,\n\t\t\t\t\tfunction (contact) {\n\t\t\t\t\t\tif (contact && contact.id === contactUUID &&\n\t\t\t\t\t\t!isModified) {\n\t\t\t\t\t\t\tself.currentDetails = contact;\n\t\t\t\t\t\t\tself.currentContact.branchAdd = self.currentDetails.branchAdd;\n\t\t\t\t\t\t\tself.currentContact.accountType = self.currentDetails.accountType;\n\t\t\t\t\t\t\tself.currentContact.ifscCode = self.currentDetails.ifscCode;\n\t\t\t\t\t\t\t// Setting IDFC bank name if its OWN\n\t\t\t\t\t\t\t// account\n\t\t\t\t\t\t\tif (self.currentContact.ifscCode) {\n\t\t\t\t\t\t\t\tself.currentContact.bankName = self.currentDetails.bankName;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!self.currentContact.ifscCode ||\n\t\t\t\t\t\t\tself.currentContact.ifscCode === '') {\n\t\t\t\t\t\t\t\tself.currentContact.bankName = idfcConstants.BENEFICIARY_OWN_BANK_NAME;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.currentContact.transferLimit = self.currentDetails.transferLimit;\n\t\t\t\t\t\t\tself.currentContact.email = self.currentDetails.email;\n\t\t\t\t\t\t\tself.currentContact.phone = self.currentDetails.phone;\n\t\t\t\t\t\t\t// set loaded from client side\n\t\t\t\t\t\t\tself.detailsLoaded = true;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Check if details are already loaded from clientside\n\t\t\t\tif (this.detailsLoaded) {\n\t\t\t\t\tthis.detailsLoaded = false;\n\t\t\t\t\t// else get details from serverside\n\t\t\t\t} else {\n\t\t\t\t\tthis.loading = true;\n\t\t\t\t\tself.errorSpin = true;\n\t\t\t\t\tvar cDate = new Date();\n\t\t\t\t\tvar cDetailsServiceEndPoint = this.defaults.contactDetailsServiceEndpoint + '&cDetailT=' + cDate;\n\t\t\t\t\tvar request = $http({\n\t\t\t\t\t\turl: cDetailsServiceEndPoint,\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tcontactId: contactUUID,\n\t\t\t\t\t\t\tbizObjId: contactUUID } });\n\n\n\n\t\t\t\t\trequest.\n\t\t\t\t\tsuccess(function (data) {\n\t\t\t\t\t\tself.errorSpin = false;\n\t\t\t\t\t\tself.currentDetails = data;\n\t\t\t\t\t\tself.currentContact.branchAdd = self.currentDetails.branchAdd;\n\t\t\t\t\t\tself.currentContact.accountType = self.currentDetails.accountType;\n\t\t\t\t\t\tself.currentContact.ifscCode = self.currentDetails.ifscCode;\n\t\t\t\t\t\t// Setting IDFC bank name if its OWN account\n\t\t\t\t\t\tif (self.currentContact.ifscCode) {\n\t\t\t\t\t\t\tself.currentContact.bankName = self.currentDetails.bankName;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!self.currentContact.ifscCode ||\n\t\t\t\t\t\tself.currentContact.ifscCode === '') {\n\t\t\t\t\t\t\tself.currentContact.bankName = idfcConstants.BENEFICIARY_OWN_BANK_NAME;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.currentContact.transferLimit = self.currentDetails.transferLimit;\n\t\t\t\t\t\tself.currentContact.email = self.currentDetails.email;\n\t\t\t\t\t\tself.currentContact.phone = self.currentDetails.phone;\n\t\t\t\t\t\tself.contactDetailsData.push(self.currentDetails);\n\t\t\t\t\t});\n\t\t\t\t\trequest.error(function (data) {\n\t\t\t\t\t\tself.errorSpin = false;\n\t\t\t\t\t\tif (data.cd) {\n\t\t\t\t\t\t\t// Redirect to login page if session timed out\n\t\t\t\t\t\t\tidfcHandler.checkTimeout(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.error = {\n\t\t\t\t\t\t\tmessage: data.statusText };\n\n\t\t\t\t\t});\n\t\t\t\t\trequest['finally'](function () {\n\t\t\t\t\t\tself.loading = false;\n\t\t\t\t\t});\n\n\t\t\t\t\treturn request;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t      * Modify contact data and sort\n\t      *\n\t      * @param contacts\n\t      * @returns {*}\n\t      */\n\t\t\tContactsModel.prototype.preprocessContacts = function (contacts) {\n\t\t\t\t// var self = this;\n\t\t\t\tvar newContacts = [];\n\n\t\t\t\t// TODO: add ticket for serverside to return alphabetical contacts\n\t\t\t\tnewContacts = orderByFilter(contacts, 'nickName');\n\t\t\t\treturn newContacts;\n\t\t\t};\n\n\t\t\t/**\n\t      * Create contact\n\t      *\n\t      * @param valid\n\t      * @returns {*}\n\t      */\n\t\t\tContactsModel.prototype.createContact = function (valid, isRSA, challengeValue, verifyData) {\n\t\t\t\tif (!valid) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar self = this;\n\t\t\t\tvar contactId = this.currentContact.id;\n\n\t\t\t\t// this.currentContact.photoUrl =\n\t\t\t\t// lpDefaultProfileImage(this.currentContact.name, 77, 77);\n\n\t\t\t\tself.currentContact.transaction = 'AddBeneficiary';\n\t\t\t\tself.transactionName = 'AddBeneficiary';\n\n\t\t\t\tif (isRSA === 'AddBeneficiary') {\n\t\t\t\t\tif (challengeValue === 'QUESTION' ||\n\t\t\t\t\tchallengeValue === 'OTPANDQUESTION' ||\n\t\t\t\t\tchallengeValue === 'RSAOTPANDQUESTION') {\n\t\t\t\t\t\tfor (var i = 0; i < verifyData.challengeQuestions.length; i++) {\n\t\t\t\t\t\t\teval('self.currentContact.question' +\n\t\t\t\t\t\t\ti +\n\t\t\t\t\t\t\t'=verifyData.challengeQuestions[i].questionId;');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (var i = 0; i < verifyData.challengeQuesAnswers.length; i++) {\n\t\t\t\t\t\t\teval('self.currentContact.answer' + i +\n\t\t\t\t\t\t\t'=verifyData.challengeQuesAnswers[i].answer;');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.currentContact.length = verifyData.challengeQuesAnswers.length;\n\t\t\t\t\t}\n\n\t\t\t\t\t// self.currentContact.transaction = isRSA;\n\t\t\t\t\tself.currentContact.credentialType = challengeValue;\n\t\t\t\t\tself.contactDataCreateService = httpService.getInstance({\n\t\t\t\t\t\tendpoint: this.defaults.contactDataCreateServiceEndpoint,\n\t\t\t\t\t\turlVars: {\n\t\t\t\t\t\t\tcontactId: contactId,\n\t\t\t\t\t\t\tbizObjId: self.currentContact.partyId } });\n\n\n\t\t\t\t} else if (isRSA === 'rsa') {\n\t\t\t\t\tself.contactDataCreateService = httpService.getInstance({\n\t\t\t\t\t\tendpoint: this.defaults.rsaAnalyzeServiceEndPoint,\n\t\t\t\t\t\turlVars: {\n\t\t\t\t\t\t\tcontactId: contactId,\n\t\t\t\t\t\t\tbizObjId: self.currentContact.partyId,\n\t\t\t\t\t\t\tdevicePrint: verifyData.devicePrint } });\n\n\n\t\t\t\t}\n\n\t\t\t\tvar xhrContactUpdate = self.contactDataCreateService.create({\n\t\t\t\t\tdata: self.currentContact });\n\n\n\t\t\t\t/*\n\t                                   * Commenting as part of IDFC Implementation - Details are being\n\t                                   * updated in currentContact itself var params = { contactId:\n\t                                   * contactId, bizObjId: contactId }; this.sendXhrRequest($http({\n\t                                   * method: 'POST', url: this.defaults.contactDataServiceEndpoint,\n\t                                   * params: params, headers: { 'Content-Type':\n\t                                   * 'application/x-www-form-urlencoded' }, data:\n\t                                   * lpCoreUtils.buildQueryString(this.currentContact) }));\n\t                                   */\n\t\t\t\tvar detailsCallback = function detailsCallback() {\n\t\t\t\t\tself.contacts.push(self.currentContact);\n\t\t\t\t\tself.contactDetailsData.push(self.currentDetails);\n\t\t\t\t\tself.refreshModel(true);\n\t\t\t\t};\n\n\t\t\t\t/*\n\t       * Commenting as part of IDFC Implementation - Details are being\n\t       * updated in currentContact itself return\n\t       * this.sendXhrRequest($http({ method: 'POST', url:\n\t       * this.defaults.contactDetailsServiceEndpoint, params: params,\n\t       * headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n\t       * data: lpCoreUtils.buildQueryString(this.currentDetails) }),\n\t       * detailsCallback);\n\t       */\n\n\t\t\t\tif (isRSA === 'rsa') {\n\t\t\t\t\treturn xhrContactUpdate;\n\t\t\t\t} else {\n\t\t\t\t\tself.sendXhrRequest(xhrContactUpdate);\n\t\t\t\t\treturn self.sendXhrRequest(xhrContactUpdate, detailsCallback);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t      * Creates a counter party via the newest version of the counter parties\n\t      * REST API\n\t      *\n\t      * @param valid\n\t      * @returns {*}\n\t      */\n\t\t\tContactsModel.prototype.createCounterParty = function (valid) {\n\t\t\t\tif (!valid) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar self = this;\n\n\t\t\t\tvar detailsCallback = function detailsCallback() {\n\t\t\t\t\tself.contacts.push(self.currentContact);\n\t\t\t\t};\n\n\t\t\t\treturn this.sendXhrRequest($http({\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\turl: this.defaults.contactListEndpoint,\n\t\t\t\t\tdata: lpCoreUtils.buildQueryString(this.currentContact) }),\n\t\t\t\tdetailsCallback);\n\t\t\t};\n\n\t\t\t/**\n\t      * Update contact\n\t      *\n\t      * @param valid\n\t      * @returns {*}\n\t      */\n\t\t\tContactsModel.prototype.updateContact = function (valid, isRSA,\n\t\t\tchallengeValue, verifyData, transactionName) {\n\t\t\t\tif (!valid) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar self = this;\n\t\t\t\tvar currentId = self.currentContact.id;\n\n\t\t\t\t// remove extra contact fields before sending request\n\t\t\t\tvar cleanData = function cleanData(allowedFields, obj) {\n\t\t\t\t\tvar result = {};\n\n\t\t\t\t\tlpCoreUtils.forEach(obj, function (value, key) {\n\t\t\t\t\t\tlpCoreUtils.forEach(allowedFields, function (fieldName) {\n\t\t\t\t\t\t\tif (fieldName === key) {\n\t\t\t\t\t\t\t\tresult[key] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\treturn result;\n\t\t\t\t};\n\n\t\t\t\tvar addEmptyFields = function addEmptyFields(allowedFields, obj) {\n\t\t\t\t\tlpCoreUtils.forEach(allowedFields, function (key) {\n\t\t\t\t\t\tif (!obj[key]) {\n\t\t\t\t\t\t\tobj[key] = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn obj;\n\t\t\t\t};\n\n\t\t\t\t// TODO: check if name || account is $dirty\n\n\t\t\t\t// update contact data\n\n\t\t\t\tif (transactionName === 'DeleteBeneficiary') {\n\t\t\t\t\tself.currentContact.transaction = transactionName;\n\t\t\t\t\tself.transactionName = 'DeleteBeneficiary';\n\t\t\t\t} else {\n\t\t\t\t\tself.currentContact.transaction = 'EditBeneficiary';\n\t\t\t\t\tself.transactionName = 'EditBeneficiary';\n\t\t\t\t}\n\n\t\t\t\tif (isRSA === 'EditBeneficiary' || isRSA === 'DeleteBeneficiary') {\n\t\t\t\t\t/*\n\t                                                                       * $scope.postDataforVerify ={ 'credentialType': action,\n\t                                                                       * 'otpValue': $scope.otpValue };\n\t                                                                       */\n\t\t\t\t\tif (challengeValue === 'QUESTION' ||\n\t\t\t\t\tchallengeValue === 'OTPANDQUESTION' ||\n\t\t\t\t\tchallengeValue === 'RSAOTPANDQUESTION') {\n\t\t\t\t\t\tfor (var i = 0; i < verifyData.challengeQuestions.length; i++) {\n\t\t\t\t\t\t\teval('self.currentContact.question' +\n\t\t\t\t\t\t\ti +\n\t\t\t\t\t\t\t'=verifyData.challengeQuestions[i].questionId;');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (var i = 0; i < verifyData.challengeQuesAnswers.length; i++) {\n\n\t\t\t\t\t\t\teval('self.currentContact.answer' + i +\n\t\t\t\t\t\t\t'=verifyData.challengeQuesAnswers[i].answer;');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.currentContact.length = verifyData.challengeQuesAnswers.length;\n\t\t\t\t\t}\n\t\t\t\t\t// self.currentContact.transaction = isRSA;\n\n\t\t\t\t\tself.contactDataModifyService = httpService.getInstance({\n\t\t\t\t\t\tendpoint: this.defaults.contactDataModifyServiceEndpoint,\n\t\t\t\t\t\turlVars: {\n\t\t\t\t\t\t\tcontactId: currentId,\n\t\t\t\t\t\t\tbizObjId: currentId } });\n\n\n\t\t\t\t} else if (isRSA === 'rsa') {\n\t\t\t\t\tself.contactDataModifyService = httpService.getInstance({\n\t\t\t\t\t\tendpoint: this.defaults.rsaAnalyzeServiceEndPoint,\n\t\t\t\t\t\turlVars: {\n\t\t\t\t\t\t\tcontactId: currentId,\n\t\t\t\t\t\t\tbizObjId: currentId,\n\t\t\t\t\t\t\tdevicePrint: verifyData.devicePrint } });\n\n\n\t\t\t\t}\n\n\t\t\t\t// if (self.currentContact.photoUrl === undefined ) {\n\t\t\t\t// self.currentContact.photoUrl =\n\t\t\t\t// lpDefaultProfileImage(self.currentContact.name, 77, 77);\n\t\t\t\t// }\n\n\t\t\t\tself.currentContact.credentialType = challengeValue;\n\t\t\t\tvar contactFields = ['name', 'nickName', 'id', 'partyId',\n\t\t\t\t'account', 'confirmAccount', 'ifscCode', 'bankName',\n\t\t\t\t'branchName', 'branchAdd', 'status', 'accountType',\n\t\t\t\t'transferLimit', 'beneficiaryType', 'otpValue', 'email',\n\t\t\t\t'phone', 'creationDate', 'coolingPeriod', 'transaction',\n\t\t\t\t'credentialType'];\n\t\t\t\tvar cleanContactData = cleanData(contactFields, self.currentContact);\n\t\t\t\tvar xhrContactUpdate = self.contactDataModifyService.create({\n\t\t\t\t\tdata: self.currentContact\n\t\t\t\t\t// changed code\n\t\t\t\t});\n\n\t\t\t\tvar contactCallback = function contactCallback() {\n\t\t\t\t\tself.contacts[self.index] = self.currentContact;\n\t\t\t\t\tself.contactDetailsData[self.index] = self.currentDetails;\n\t\t\t\t\tself.refreshModel(true);\n\t\t\t\t};\n\n\t\t\t\t// return self.sendXhrRequest(xhrContactUpdate, contactCallback);\n\t\t\t\tif (isRSA === 'rsa') {\n\t\t\t\t\treturn xhrContactUpdate;\n\t\t\t\t} else {\n\t\t\t\t\tself.sendXhrRequest(xhrContactUpdate);\n\t\t\t\t\treturn self.sendXhrRequest(xhrContactUpdate, contactCallback);\n\t\t\t\t}\n\n\t\t\t\t// this.sendXhrRequest($http({\n\t\t\t\t// method: 'PUT',\n\t\t\t\t// url: this.defaults.contactDataServiceEndpoint,\n\t\t\t\t// params: {\n\t\t\t\t// contactId: currentId\n\t\t\t\t// },\n\t\t\t\t// headers: {\n\t\t\t\t// 'Content-Type': 'application/x-www-form-urlencoded'\n\t\t\t\t// },\n\t\t\t\t// data: lpCoreUtils.buildQueryString(cleanContactData)\n\t\t\t\t// }), contactCallback);\n\n\t\t\t\t/*\n\t    * Commenting as part of IDFC Implementation - Details are being\n\t    * updated in currentContact itself -- START // TODO: check if\n\t    * detail fields are $dirty var detailFields = [ 'address', 'city',\n\t    * 'state', 'dateOfBirth', 'email', 'phone', 'id' ]; var\n\t    * cleanDetailsData = cleanData(detailFields, self.currentDetails);\n\t    * var fullDetailsData = addEmptyFields(detailFields,\n\t    * cleanDetailsData); var detailsCallback = function() { // replace\n\t    * clientside contact data with new data if\n\t    * (self.contactDetailsData.length > 0) {\n\t    * lpCoreUtils.forEach(self.contactDetailsData, function(contact) {\n\t    * if (contact && contact.id === currentId) { contact =\n\t    * cleanDetailsData; self.currentDetails = contact; return; } }); } };\n\t    * return this.sendXhrRequest($http({ method: 'PUT', url:\n\t    * this.defaults.contactDetailsServiceEndpoint, params: { contactId:\n\t    * currentId }, headers: { 'Content-Type':\n\t    * 'application/x-www-form-urlencoded' }, data:\n\t    * lpCoreUtils.buildQueryString(fullDetailsData) }),\n\t    * detailsCallback);\n\t    */\n\t\t\t};\n\n\t\t\t/**\n\t      * Delete contact\n\t      *\n\t      * @returns {*}\n\t      */\n\t\t\tContactsModel.prototype.deleteContact = function (isRSA, challengeValue,\n\t\t\tverifyData) {\n\t\t\t\tvar self = this;\n\t\t\t\tvar ccid = self.currentContact.id;\n\t\t\t\tvar xhr;\n\t\t\t\tself.currentContact.status = 'INACTIVE';\n\n\t\t\t\txhr = self.updateContact(true, isRSA, challengeValue, verifyData,\n\t\t\t\t'DeleteBeneficiary');\n\t\t\t\treturn xhr;\n\t\t\t\t/*\n\t                * var successCallback = function(cid) { // remove contact from\n\t                * client side data lpCoreUtils.forEach(self.contacts,\n\t                * function(contact) { if(contact && contact.id === cid) { var index =\n\t                * self.contacts.indexOf(contact); self.contacts.splice(index, 1); }\n\t                * }); if (self.contacts.length > 0) { self.currentContact =\n\t                * self.contacts[0]; } else { self.currentContact = null;\n\t                * self.moduleState = 'contactsNone'; } self.refreshModel(); };\n\t                * this.sendXhrRequest($http({ method: 'DELETE', url:\n\t                * this.defaults.contactDataServiceEndpoint, params: { contactId:\n\t                * ccid } }), successCallback(ccid));\n\t                */\n\t\t\t};\n\n\t\t\t/**\n\t      * Displays if no contacts found\n\t      *\n\t      * @returns {*}\n\t      */\n\t\t\tContactsModel.prototype.noContactsFound = function () {\n\t\t\t\tvar noContactsFound = !this.loading && this.contacts.length === 0;\n\t\t\t\treturn noContactsFound;\n\t\t\t};\n\n\t\t\t/**\n\t      * Send xhr request\n\t      *\n\t      * @param xhr\n\t      * @returns {*}\n\t      */\n\t\t\tContactsModel.prototype.sendXhrRequest = function (xhr, callback) {\n\t\t\t\tvar self = this;\n\n\t\t\t\txhr.loading = true;\n\t\t\t\txhr.success(function (data) {\n\t\t\t\t\tif (lpCoreUtils.isFunction(callback)) {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\txhr.error(function (data) {\n\t\t\t\t\tif (data.cd) {\n\t\t\t\t\t\t// Redirect to login page if session timed out\n\t\t\t\t\t\tidfcHandler.checkTimeout(data);\n\t\t\t\t\t}\n\t\t\t\t\tself.error = {\n\t\t\t\t\t\tmessage: data.statusText };\n\n\t\t\t\t});\n\t\t\t\txhr['finally'](function () {\n\t\t\t\t\txhr.loading = false;\n\t\t\t\t});\n\n\t\t\t\treturn xhr;\n\t\t\t};\n\n\t\t\t// move to controller\n\t\t\t/**\n\t   * Select Contact\n\t   *\n\t   * @param contact\n\t   */\n\t\t\tContactsModel.prototype.selectContact = function (contact, isModified) {\n\n\t\t\t\tvar self = this;\n\n\t\t\t\tif (contact && !this.disableSelection) {\n\t\t\t\t\tif (this.contacts.length > 0) {\n\t\t\t\t\t\tif (self.transactionName === 'DeleteBeneficiary') {\n\t\t\t\t\t\t\t// If deleting last contact then go to new last contact\n\t\t\t\t\t\t\tif (self.contacts.length <= self.idx) {\n\t\t\t\t\t\t\t\tself.idx = self.contacts.length - 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.selected = self.contacts[self.idx].id;\n\t\t\t\t\t\t\tself.currentContact = self.contacts[self.idx];\n\t\t\t\t\t\t} else if (self.transactionName !== 'EditBeneficiary') {\n\t\t\t\t\t\t\tself.selected = contact.id;\n\t\t\t\t\t\t\tself.currentContact = contact;\n\t\t\t\t\t\t\tself.idx = self.contacts.indexOf(contact);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.loadContactDetails(self.currentContact.id, isModified);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.currentContact = null;\n\t\t\t\t\t\tthis.moduleState = 'contactsNone';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t      * Refresh Model\n\t      *\n\t      * @param method\n\t      */\n\t\t\tContactsModel.prototype.refreshModel = function (isModified) {\n\t\t\t\tvar self = this;\n\t\t\t\tself.disableSelection = false;\n\t\t\t\tif (isModified && self.transactionName !== 'EditBeneficiary') {\n\t\t\t\t\tself.loadContacts().success(function (data) {\n\t\t\t\t\t\tif (self.currentContact) {\n\t\t\t\t\t\t\tself.selectContact(self.currentContact, isModified);\n\t\t\t\t\t\t\tself.moduleState = 'contactsView';\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tif (self.currentContact) {\n\t\t\t\t\t\tself.selectContact(self.currentContact, isModified);\n\t\t\t\t\t\tself.moduleState = 'contactsView';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t      * Find a contact by name.\n\t      *\n\t      * @param method\n\t      */\n\t\t\tContactsModel.prototype.findByName = function (name) {\n\t\t\t\treturn lpCoreUtils.find(this.contacts, {\n\t\t\t\t\tname: name });\n\n\t\t\t};\n\n\t\t\treturn ContactsModel;\n\t\t};\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// scripts/main.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ad6cba58c783220f0454","/**\n *  ----------------------------------------------------------------\n *  Copyright © Backbase B.V.\n *  ----------------------------------------------------------------\n *  Author : Backbase R&D - Amsterdam - New York\n *  Filename : main.js\n *  Description:\n *  Main File Module Contacts\n *  ----------------------------------------------------------------\n */\n\ndefine( function (require, exports, module) {\n    'use strict';\n\n    module.name = 'module-contacts';\n\n    var base = require('base');\n    var users = require('module-users');\n\n    var deps = [\n        users.name\n    ];\n\n    module.exports = base.createModule(module.name, deps)\n        .factory(require('./model'));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./scripts/main.js\n// module id = 1\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 2\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"base\"\n// module id = 3\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"module-users\"\n// module id = 4\n// module chunks = 0","define(function(require, exports, module) {\n\t'use strict';\n\tvar idfcConstants = require('idfccommon').idfcConstants;\n\tvar idfcHandler = require('idfcerror');\n\tvar $ = require('jquery');\n\n\t// @ngInject\n\texports.ContactsModel = function($http, orderByFilter, httpService, lpCoreUtils,\n\t\t\tlpDefaultProfileImage) {\n\t\t/**\n\t\t * Contacts service constructor\n\t\t *\n\t\t * @param config\n\t\t * @constructor\n\t\t */\n\t\tvar ContactsModel = function(config) {\n\t\t\tconfig = config || {};\n\t\t\tthis.defaults = {\n\t\t\t\tlocale: config.locale,\n\t\t\t\tcontactListEndpoint: config.contacts,\n\t\t\t\tcontactDataCreateServiceEndpoint: config.contactDataCreate,\n\t\t\t\tcontactDataModifyServiceEndpoint: config.contactDataModify,\n\t\t\t\tcontactDetailsServiceEndpoint: config.contactDetails,\n\t\t\t\tmetaDataEndpoint: config.metaData,\n\t\t\t\tbankServiceEndpoint: config.bankServiceDetails,\n\t\t\t\tdatabaseServiceEndpoint: config.databaseServiceDetails,\n\t\t\t\tgenerateOTPServiceEndPoint: config.generateOTPDetails,\n\t\t\t\trsaAnalyzeServiceEndPoint: config.rsaAnalyzeService\n\t\t\t};\n\n\t\t\tthis.locale = config.locale;\n\n\t\t\tif (config.contactDetails) {\n\t\t\t\tthis.contactDetailsData = [];\n\t\t\t}\n\n\t\t\tself.contacts = [];\n\t\t\tself.banksList = [];\n\t\t\tself.ifscList = [];\n\t\t\tself.countryCodesList = [];\n\n\t\t\tif (!config.lazyload) {\n\t\t\t\tthis.loadContacts();\n\t\t\t}\n\t\t};\n\n\t\tContactsModel.prototype.generateOTP = function(value) {\n\t\t\tvar resendOTP = null;\n\t\t\tvar self = this;\n\n\t\t\tvar generateOTPServiceURL = lpCoreUtils.resolvePortalPlaceholders(\n\t\t\t\t\tthis.defaults.generateOTPServiceEndPoint);\n\n\t\t\tif (value === 'resend') {\n\t\t\t\tresendOTP = true;\n\t\t\t} else {\n\t\t\t\tresendOTP = false;\n\t\t\t}\n\t\t\tvar postData = {\n\t\t\t\t'resendOTP': resendOTP\n\t\t\t};\n\n\t\t\tpostData = $.param(postData || {});\n\n\t\t\tvar xhr = $http({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: generateOTPServiceURL,\n\t\t\t\tdata: postData,\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded;'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn xhr;\n\t\t};\n\n\t\t// Check for the beneficiary daily add limit\n\t\tContactsModel.prototype.checkDailyAddLimit = function() {\n\t\t\tvar self = this;\n\n\t\t\tself.databaseService = httpService.getInstance({\n\t\t\t\tendpoint: this.defaults.databaseServiceEndpoint,\n\t\t\t\turlVars: {\n\t\t\t\t\trequestId: 'dailyCount'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar xhr = self.databaseService.read();\n\n\t\t\treturn xhr;\n\t\t};\n\n\t\t// Load Bank Names List\n\t\tContactsModel.prototype.loadBanksList = function() {\n\t\t\tvar self = this;\n\n\t\t\tself.bankService = httpService.getInstance({\n\t\t\t\tendpoint: this.defaults.bankServiceEndpoint,\n\t\t\t\turlVars: {\n\t\t\t\t\trequestId: 'banksList',\n\t\t\t\t\tbizObjId: ''\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar xhr = self.bankService.read();\n\n\t\t\txhr.success(function(data) {\n\t\t\t\tif (data && data !== 'null') {\n\t\t\t\t\tself.banksList = data.banksList;\n\t\t\t\t\tself.ifscList = data.ifscList;\n\t\t\t\t} else {\n\t\t\t\t\tself.banksList = [];\n\t\t\t\t\tself.ifscList = [];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn xhr;\n\t\t};\n\n\t\t/**\n\t\t * Load country codes\n\t\t */\n\t\tContactsModel.prototype.loadCountryCodesList = function() {\n\t\t\tvar self = this;\n\n\t\t\tself.bankService = httpService.getInstance({\n\t\t\t\tendpoint: this.defaults.bankServiceEndpoint,\n\t\t\t\turlVars: {\n\t\t\t\t\trequestId: 'countryCodesList',\n\t\t\t\t\tbizObjId: ''\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar xhr = self.bankService.read();\n\n\t\t\txhr.success(function(data) {\n\t\t\t\tif (data && data !== 'null') {\n\t\t\t\t\tself.countryCodesList = data.countryCodesList;\n\t\t\t\t} else {\n\t\t\t\t\tself.countryCodesList = [];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn xhr;\n\t\t};\n\n\t\t/**\n\t\t * Load contacts\n\t\t */\n\t\tContactsModel.prototype.loadContacts = function() {\n\t\t\tvar self = this;\n\t\t\tself.errorSpin = true;\n\t\t\tvar cDate = new Date();\n\t\t\tvar servicEndPoint = this.defaults.contactListEndpoint +'&cParam='+cDate;\n\t\t\tvar request = $http.get(servicEndPoint);\n\t\t\tthis.loading = true;\n\n\t\t\trequest.success(function(data) {\n\t\t\t\tself.errorSpin = false;\n\t\t\t\tif (data && data !== 'null') {\n\t\t\t\t\t// Set the id of the recently added contact to\n\t\t\t\t\t// currentContact\n\t\t\t\t\tif (self.currentContact\n\t\t\t\t\t\t\t&& self.transactionName === 'AddBeneficiary') {\n\t\t\t\t\t\tself.currentContact = data[data.length - 1];\n\t\t\t\t\t\tself.currentContact.id = data[data.length - 1].id;\n\t\t\t\t\t}\n\t\t\t\t\tself.contacts = self.preprocessContacts(data);\n\t\t\t\t\t// Filter out only the ACTIVE contents\n\t\t\t\t\tself.activeContacts = [];\n\t\t\t\t\tlpCoreUtils.forEach(self.contacts, function(contact) {\n\t\t\t\t\t\tif (contact && contact.status === 'ACTIVE') {\n\t\t\t\t\t\t\tself.activeContacts.push(contact);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tself.contacts = self.activeContacts;\n\t\t\t\t} else {\n\t\t\t\t\tself.contacts = [];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\trequest.error(function(error) {\n\t\t\t\tself.errorSpin = false;\n\t\t\t\tif (error.cd) {\n\t\t\t\t\t// Redirect to login page if session timed out\n\t\t\t\t\tidfcHandler.checkTimeout(error);\n\t\t\t\t}\n\t\t\t\tself.error = {\n\t\t\t\t\tmessage: error.statusText\n\t\t\t\t};\n\t\t\t});\n\t\t\trequest['finally'](function() {\n\t\t\t\tself.loading = false;\n\t\t\t});\n\n\t\t\treturn request;\n\t\t};\n\n\t\t/**\n\t\t * Load details\n\t\t*\n\t\t * @returns {*}\n\t\t */\n\t\tContactsModel.prototype.loadContactDetails = function(contactUUID, isModified) {\n\t\t\tvar self = this;\n\t\t\t// Focus on the selected contactq\n\t\t\tif (self.selected && contactUUID) {\n\t\t\t\tself.selected = contactUUID;\n\t\t\t}\n\t\t\t// check if contact details exist on clientside\n\t\t\tif (this.contactDetailsData.length > 0) {\n\t\t\t\tlpCoreUtils\n\t\t\t\t\t\t.forEach(\n\t\t\t\t\t\t\t\tthis.contactDetailsData,\n\t\t\t\t\t\t\t\tfunction(contact) {\n\t\t\t\t\t\t\t\t\tif (contact && contact.id === contactUUID\n\t\t\t\t\t\t\t\t\t\t\t&& !isModified) {\n\t\t\t\t\t\t\t\t\t\tself.currentDetails = contact;\n\t\t\t\t\t\t\t\t\t\tself.currentContact.branchAdd = self.currentDetails.branchAdd;\n\t\t\t\t\t\t\t\t\t\tself.currentContact.accountType = self.currentDetails.accountType;\n\t\t\t\t\t\t\t\t\t\tself.currentContact.ifscCode = self.currentDetails.ifscCode;\n\t\t\t\t\t\t\t\t\t\t// Setting IDFC bank name if its OWN\n\t\t\t\t\t\t\t\t\t\t// account\n\t\t\t\t\t\t\t\t\t\tif (self.currentContact.ifscCode) {\n\t\t\t\t\t\t\t\t\t\t\tself.currentContact.bankName = self.currentDetails.bankName;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (!self.currentContact.ifscCode\n\t\t\t\t\t\t\t\t\t\t\t\t|| self.currentContact.ifscCode === '') {\n\t\t\t\t\t\t\t\t\t\t\tself.currentContact.bankName = idfcConstants.BENEFICIARY_OWN_BANK_NAME;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tself.currentContact.transferLimit = self.currentDetails.transferLimit;\n\t\t\t\t\t\t\t\t\t\tself.currentContact.email = self.currentDetails.email;\n\t\t\t\t\t\t\t\t\t\tself.currentContact.phone = self.currentDetails.phone;\n\t\t\t\t\t\t\t\t\t\t// set loaded from client side\n\t\t\t\t\t\t\t\t\t\tself.detailsLoaded = true;\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Check if details are already loaded from clientside\n\t\t\tif (this.detailsLoaded) {\n\t\t\t\tthis.detailsLoaded = false;\n\t\t\t\t// else get details from serverside\n\t\t\t} else {\n\t\t\t\tthis.loading = true;\n\t\t\t\tself.errorSpin = true;\n\t\t\t\tvar cDate = new Date();\n\t\t\t\tvar cDetailsServiceEndPoint = this.defaults.contactDetailsServiceEndpoint+'&cDetailT='+cDate;\n\t\t\t\tvar request = $http({\n\t\t\t\t\turl: cDetailsServiceEndPoint,\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tcontactId: contactUUID,\n\t\t\t\t\t\tbizObjId: contactUUID\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\trequest\n\t\t\t\t\t\t.success(function(data) {\n\t\t\t\t\t\t\tself.errorSpin = false;\n\t\t\t\t\t\t\tself.currentDetails = data;\n\t\t\t\t\t\t\tself.currentContact.branchAdd = self.currentDetails.branchAdd;\n\t\t\t\t\t\t\tself.currentContact.accountType = self.currentDetails.accountType;\n\t\t\t\t\t\t\tself.currentContact.ifscCode = self.currentDetails.ifscCode;\n\t\t\t\t\t\t\t// Setting IDFC bank name if its OWN account\n\t\t\t\t\t\t\tif (self.currentContact.ifscCode) {\n\t\t\t\t\t\t\t\tself.currentContact.bankName = self.currentDetails.bankName;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!self.currentContact.ifscCode\n\t\t\t\t\t\t\t\t\t|| self.currentContact.ifscCode === '') {\n\t\t\t\t\t\t\t\tself.currentContact.bankName = idfcConstants.BENEFICIARY_OWN_BANK_NAME;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.currentContact.transferLimit = self.currentDetails.transferLimit;\n\t\t\t\t\t\t\tself.currentContact.email = self.currentDetails.email;\n\t\t\t\t\t\t\tself.currentContact.phone = self.currentDetails.phone;\n\t\t\t\t\t\t\tself.contactDetailsData.push(self.currentDetails);\n\t\t\t\t\t\t});\n\t\t\t\trequest.error(function(data) {\n\t\t\t\t\tself.errorSpin = false;\n\t\t\t\t\tif (data.cd) {\n\t\t\t\t\t\t// Redirect to login page if session timed out\n\t\t\t\t\t\tidfcHandler.checkTimeout(data);\n\t\t\t\t\t}\n\t\t\t\t\tself.error = {\n\t\t\t\t\t\tmessage: data.statusText\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\trequest['finally'](function() {\n\t\t\t\t\tself.loading = false;\n\t\t\t\t});\n\n\t\t\t\treturn request;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Modify contact data and sort\n\t\t *\n\t\t * @param contacts\n\t\t * @returns {*}\n\t\t */\n\t\tContactsModel.prototype.preprocessContacts = function(contacts) {\n\t\t\t// var self = this;\n\t\t\tvar newContacts = [];\n\n\t\t\t// TODO: add ticket for serverside to return alphabetical contacts\n\t\t\tnewContacts = orderByFilter(contacts, 'nickName');\n\t\t\treturn newContacts;\n\t\t};\n\n\t\t/**\n\t\t * Create contact\n\t\t *\n\t\t * @param valid\n\t\t * @returns {*}\n\t\t */\n\t\tContactsModel.prototype.createContact = function(valid, isRSA, challengeValue, verifyData) {\n\t\t\tif (!valid) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar self = this;\n\t\t\tvar contactId = this.currentContact.id;\n\n\t\t\t// this.currentContact.photoUrl =\n\t\t\t// lpDefaultProfileImage(this.currentContact.name, 77, 77);\n\n\t\t\tself.currentContact.transaction = 'AddBeneficiary';\n\t\t\tself.transactionName = 'AddBeneficiary';\n\n\t\t\tif (isRSA === 'AddBeneficiary') {\n\t\t\t\tif (challengeValue === 'QUESTION'\n\t\t\t\t\t\t|| challengeValue === 'OTPANDQUESTION'\n\t\t\t\t\t\t|| challengeValue === 'RSAOTPANDQUESTION') {\n\t\t\t\t\tfor (var i = 0; i < verifyData.challengeQuestions.length; i++) {\n\t\t\t\t\t\teval('self.currentContact.question'\n\t\t\t\t\t\t\t\t+ i\n\t\t\t\t\t\t\t\t+ '=verifyData.challengeQuestions[i].questionId;');\n\t\t\t\t\t}\n\t\t\t\t\tfor (var i = 0; i < verifyData.challengeQuesAnswers.length; i++) {\n\t\t\t\t\t\teval('self.currentContact.answer' + i\n\t\t\t\t\t\t\t\t+ '=verifyData.challengeQuesAnswers[i].answer;');\n\t\t\t\t\t}\n\t\t\t\t\tself.currentContact.length = verifyData.challengeQuesAnswers.length;\n\t\t\t\t}\n\n\t\t\t\t// self.currentContact.transaction = isRSA;\n\t\t\t\tself.currentContact.credentialType = challengeValue;\n\t\t\t\tself.contactDataCreateService = httpService.getInstance({\n\t\t\t\t\tendpoint: this.defaults.contactDataCreateServiceEndpoint,\n\t\t\t\t\turlVars: {\n\t\t\t\t\t\tcontactId: contactId,\n\t\t\t\t\t\tbizObjId: self.currentContact.partyId\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (isRSA === 'rsa') {\n\t\t\t\tself.contactDataCreateService = httpService.getInstance({\n\t\t\t\t\tendpoint: this.defaults.rsaAnalyzeServiceEndPoint,\n\t\t\t\t\turlVars: {\n\t\t\t\t\t\tcontactId: contactId,\n\t\t\t\t\t\tbizObjId: self.currentContact.partyId,\n\t\t\t\t\t\tdevicePrint: verifyData.devicePrint\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar xhrContactUpdate = self.contactDataCreateService.create({\n\t\t\t\tdata: self.currentContact\n\t\t\t});\n\n\t\t\t/*\n\t\t\t * Commenting as part of IDFC Implementation - Details are being\n\t\t\t * updated in currentContact itself var params = { contactId:\n\t\t\t * contactId, bizObjId: contactId }; this.sendXhrRequest($http({\n\t\t\t * method: 'POST', url: this.defaults.contactDataServiceEndpoint,\n\t\t\t * params: params, headers: { 'Content-Type':\n\t\t\t * 'application/x-www-form-urlencoded' }, data:\n\t\t\t * lpCoreUtils.buildQueryString(this.currentContact) }));\n\t\t\t */\n\t\t\tvar detailsCallback = function() {\n\t\t\t\tself.contacts.push(self.currentContact);\n\t\t\t\tself.contactDetailsData.push(self.currentDetails);\n\t\t\t\tself.refreshModel(true);\n\t\t\t};\n\n\t\t\t/*\n\t\t\t * Commenting as part of IDFC Implementation - Details are being\n\t\t\t * updated in currentContact itself return\n\t\t\t * this.sendXhrRequest($http({ method: 'POST', url:\n\t\t\t * this.defaults.contactDetailsServiceEndpoint, params: params,\n\t\t\t * headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n\t\t\t * data: lpCoreUtils.buildQueryString(this.currentDetails) }),\n\t\t\t * detailsCallback);\n\t\t\t */\n\n\t\t\tif (isRSA === 'rsa') {\n\t\t\t\treturn xhrContactUpdate;\n\t\t\t} else {\n\t\t\t\tself.sendXhrRequest(xhrContactUpdate);\n\t\t\t\treturn self.sendXhrRequest(xhrContactUpdate, detailsCallback);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Creates a counter party via the newest version of the counter parties\n\t\t * REST API\n\t\t *\n\t\t * @param valid\n\t\t * @returns {*}\n\t\t */\n\t\tContactsModel.prototype.createCounterParty = function(valid) {\n\t\t\tif (!valid) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar self = this;\n\n\t\t\tvar detailsCallback = function() {\n\t\t\t\tself.contacts.push(self.currentContact);\n\t\t\t};\n\n\t\t\treturn this.sendXhrRequest($http({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: this.defaults.contactListEndpoint,\n\t\t\t\tdata: lpCoreUtils.buildQueryString(this.currentContact)\n\t\t\t}), detailsCallback);\n\t\t};\n\n\t\t/**\n\t\t * Update contact\n\t\t *\n\t\t * @param valid\n\t\t * @returns {*}\n\t\t */\n\t\tContactsModel.prototype.updateContact = function(valid, isRSA,\n\t\t\t\tchallengeValue, verifyData, transactionName) {\n\t\t\tif (!valid) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar self = this;\n\t\t\tvar currentId = self.currentContact.id;\n\n\t\t\t// remove extra contact fields before sending request\n\t\t\tvar cleanData = function(allowedFields, obj) {\n\t\t\t\tvar result = {};\n\n\t\t\t\tlpCoreUtils.forEach(obj, function(value, key) {\n\t\t\t\t\tlpCoreUtils.forEach(allowedFields, function(fieldName) {\n\t\t\t\t\t\tif (fieldName === key) {\n\t\t\t\t\t\t\tresult[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\treturn result;\n\t\t\t};\n\n\t\t\tvar addEmptyFields = function(allowedFields, obj) {\n\t\t\t\tlpCoreUtils.forEach(allowedFields, function(key) {\n\t\t\t\t\tif (!obj[key]) {\n\t\t\t\t\t\tobj[key] = null;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn obj;\n\t\t\t};\n\n\t\t\t// TODO: check if name || account is $dirty\n\n\t\t\t// update contact data\n\n\t\t\tif (transactionName === 'DeleteBeneficiary') {\n\t\t\t\tself.currentContact.transaction = transactionName;\n\t\t\t\tself.transactionName = 'DeleteBeneficiary';\n\t\t\t} else {\n\t\t\t\tself.currentContact.transaction = 'EditBeneficiary';\n\t\t\t\tself.transactionName = 'EditBeneficiary';\n\t\t\t}\n\n\t\t\tif (isRSA === 'EditBeneficiary' || isRSA === 'DeleteBeneficiary') {\n\t\t\t\t/*\n\t\t\t\t * $scope.postDataforVerify ={ 'credentialType': action,\n\t\t\t\t * 'otpValue': $scope.otpValue };\n\t\t\t\t */\n\t\t\t\tif (challengeValue === 'QUESTION'\n\t\t\t\t\t\t|| challengeValue === 'OTPANDQUESTION'\n\t\t\t\t\t\t|| challengeValue === 'RSAOTPANDQUESTION') {\n\t\t\t\t\tfor (var i = 0; i < verifyData.challengeQuestions.length; i++) {\n\t\t\t\t\t\teval('self.currentContact.question'\n\t\t\t\t\t\t\t\t+ i\n\t\t\t\t\t\t\t\t+ '=verifyData.challengeQuestions[i].questionId;');\n\t\t\t\t\t}\n\t\t\t\t\tfor (var i = 0; i < verifyData.challengeQuesAnswers.length; i++) {\n\n\t\t\t\t\t\teval('self.currentContact.answer' + i\n\t\t\t\t\t\t\t\t+ '=verifyData.challengeQuesAnswers[i].answer;');\n\t\t\t\t\t}\n\t\t\t\t\tself.currentContact.length = verifyData.challengeQuesAnswers.length;\n\t\t\t\t}\n\t\t\t\t// self.currentContact.transaction = isRSA;\n\n\t\t\t\tself.contactDataModifyService = httpService.getInstance({\n\t\t\t\t\tendpoint: this.defaults.contactDataModifyServiceEndpoint,\n\t\t\t\t\turlVars: {\n\t\t\t\t\t\tcontactId: currentId,\n\t\t\t\t\t\tbizObjId: currentId\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (isRSA === 'rsa') {\n\t\t\t\tself.contactDataModifyService = httpService.getInstance({\n\t\t\t\t\tendpoint: this.defaults.rsaAnalyzeServiceEndPoint,\n\t\t\t\t\turlVars: {\n\t\t\t\t\t\tcontactId: currentId,\n\t\t\t\t\t\tbizObjId: currentId,\n\t\t\t\t\t\tdevicePrint: verifyData.devicePrint\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// if (self.currentContact.photoUrl === undefined ) {\n\t\t\t// self.currentContact.photoUrl =\n\t\t\t// lpDefaultProfileImage(self.currentContact.name, 77, 77);\n\t\t\t// }\n\n\t\t\tself.currentContact.credentialType = challengeValue;\n\t\t\tvar contactFields = [ 'name', 'nickName', 'id', 'partyId',\n\t\t\t\t\t'account', 'confirmAccount', 'ifscCode', 'bankName',\n\t\t\t\t\t'branchName', 'branchAdd', 'status', 'accountType',\n\t\t\t\t\t'transferLimit', 'beneficiaryType', 'otpValue', 'email',\n\t\t\t\t\t'phone', 'creationDate', 'coolingPeriod', 'transaction',\n\t\t\t\t\t'credentialType' ];\n\t\t\tvar cleanContactData = cleanData(contactFields, self.currentContact);\n\t\t\tvar xhrContactUpdate = self.contactDataModifyService.create({\n\t\t\t\tdata: self.currentContact\n\t\t\t// changed code\n\t\t\t});\n\n\t\t\tvar contactCallback = function() {\n\t\t\t\tself.contacts[self.index] = self.currentContact;\n\t\t\t\tself.contactDetailsData[self.index] = self.currentDetails;\n\t\t\t\tself.refreshModel(true);\n\t\t\t};\n\n\t\t\t// return self.sendXhrRequest(xhrContactUpdate, contactCallback);\n\t\t\tif (isRSA === 'rsa') {\n\t\t\t\treturn xhrContactUpdate;\n\t\t\t} else {\n\t\t\t\tself.sendXhrRequest(xhrContactUpdate);\n\t\t\t\treturn self.sendXhrRequest(xhrContactUpdate, contactCallback);\n\t\t\t}\n\n\t\t\t// this.sendXhrRequest($http({\n\t\t\t// method: 'PUT',\n\t\t\t// url: this.defaults.contactDataServiceEndpoint,\n\t\t\t// params: {\n\t\t\t// contactId: currentId\n\t\t\t// },\n\t\t\t// headers: {\n\t\t\t// 'Content-Type': 'application/x-www-form-urlencoded'\n\t\t\t// },\n\t\t\t// data: lpCoreUtils.buildQueryString(cleanContactData)\n\t\t\t// }), contactCallback);\n\n\t\t\t/*\n\t\t\t * Commenting as part of IDFC Implementation - Details are being\n\t\t\t * updated in currentContact itself -- START // TODO: check if\n\t\t\t * detail fields are $dirty var detailFields = [ 'address', 'city',\n\t\t\t * 'state', 'dateOfBirth', 'email', 'phone', 'id' ]; var\n\t\t\t * cleanDetailsData = cleanData(detailFields, self.currentDetails);\n\t\t\t * var fullDetailsData = addEmptyFields(detailFields,\n\t\t\t * cleanDetailsData); var detailsCallback = function() { // replace\n\t\t\t * clientside contact data with new data if\n\t\t\t * (self.contactDetailsData.length > 0) {\n\t\t\t * lpCoreUtils.forEach(self.contactDetailsData, function(contact) {\n\t\t\t * if (contact && contact.id === currentId) { contact =\n\t\t\t * cleanDetailsData; self.currentDetails = contact; return; } }); } };\n\t\t\t * return this.sendXhrRequest($http({ method: 'PUT', url:\n\t\t\t * this.defaults.contactDetailsServiceEndpoint, params: { contactId:\n\t\t\t * currentId }, headers: { 'Content-Type':\n\t\t\t * 'application/x-www-form-urlencoded' }, data:\n\t\t\t * lpCoreUtils.buildQueryString(fullDetailsData) }),\n\t\t\t * detailsCallback);\n\t\t\t */\n\t\t};\n\n\t\t/**\n\t\t * Delete contact\n\t\t *\n\t\t * @returns {*}\n\t\t */\n\t\tContactsModel.prototype.deleteContact = function(isRSA, challengeValue,\n\t\t\t\tverifyData) {\n\t\t\tvar self = this;\n\t\t\tvar ccid = self.currentContact.id;\n\t\t\tvar xhr;\n\t\t\tself.currentContact.status = 'INACTIVE';\n\n\t\t\txhr = self.updateContact(true, isRSA, challengeValue, verifyData,\n\t\t\t\t\t'DeleteBeneficiary');\n\t\t\treturn xhr;\n\t\t\t/*\n\t\t\t * var successCallback = function(cid) { // remove contact from\n\t\t\t * client side data lpCoreUtils.forEach(self.contacts,\n\t\t\t * function(contact) { if(contact && contact.id === cid) { var index =\n\t\t\t * self.contacts.indexOf(contact); self.contacts.splice(index, 1); }\n\t\t\t * }); if (self.contacts.length > 0) { self.currentContact =\n\t\t\t * self.contacts[0]; } else { self.currentContact = null;\n\t\t\t * self.moduleState = 'contactsNone'; } self.refreshModel(); };\n\t\t\t * this.sendXhrRequest($http({ method: 'DELETE', url:\n\t\t\t * this.defaults.contactDataServiceEndpoint, params: { contactId:\n\t\t\t * ccid } }), successCallback(ccid));\n\t\t\t */\n\t\t};\n\n\t\t/**\n\t\t * Displays if no contacts found\n\t\t *\n\t\t * @returns {*}\n\t\t */\n\t\tContactsModel.prototype.noContactsFound = function() {\n\t\t\tvar noContactsFound = !this.loading && this.contacts.length === 0;\n\t\t\treturn noContactsFound;\n\t\t};\n\n\t\t/**\n\t\t * Send xhr request\n\t\t *\n\t\t * @param xhr\n\t\t * @returns {*}\n\t\t */\n\t\tContactsModel.prototype.sendXhrRequest = function(xhr, callback) {\n\t\t\tvar self = this;\n\n\t\t\txhr.loading = true;\n\t\t\txhr.success(function(data) {\n\t\t\t\tif (lpCoreUtils.isFunction(callback)) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t});\n\t\t\txhr.error(function(data) {\n\t\t\t\tif (data.cd) {\n\t\t\t\t\t// Redirect to login page if session timed out\n\t\t\t\t\tidfcHandler.checkTimeout(data);\n\t\t\t\t}\n\t\t\t\tself.error = {\n\t\t\t\t\tmessage: data.statusText\n\t\t\t\t};\n\t\t\t});\n\t\t\txhr['finally'](function() {\n\t\t\t\txhr.loading = false;\n\t\t\t});\n\n\t\t\treturn xhr;\n\t\t};\n\n\t\t// move to controller\n\t\t/**\n\t\t * Select Contact\n\t\t *\n\t\t * @param contact\n\t\t */\n\t\tContactsModel.prototype.selectContact = function(contact, isModified) {\n\n\t\t\tvar self = this;\n\n\t\t\tif (contact && !this.disableSelection) {\n\t\t\t\tif (this.contacts.length > 0) {\n\t\t\t\t\tif (self.transactionName === 'DeleteBeneficiary') {\n\t\t\t\t\t\t// If deleting last contact then go to new last contact\n\t\t\t\t\t\tif (self.contacts.length <= self.idx) {\n\t\t\t\t\t\t\tself.idx = self.contacts.length - 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.selected = self.contacts[self.idx].id;\n\t\t\t\t\t\tself.currentContact = self.contacts[self.idx];\n\t\t\t\t\t} else if (self.transactionName !== 'EditBeneficiary') {\n\t\t\t\t\t\tself.selected = contact.id;\n\t\t\t\t\t\tself.currentContact = contact;\n\t\t\t\t\t\tself.idx = self.contacts.indexOf(contact);\n\t\t\t\t\t}\n\t\t\t\t\tself.loadContactDetails(self.currentContact.id, isModified);\n\t\t\t\t} else {\n\t\t\t\t\tthis.currentContact = null;\n\t\t\t\t\tthis.moduleState = 'contactsNone';\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Refresh Model\n\t\t *\n\t\t * @param method\n\t\t */\n\t\tContactsModel.prototype.refreshModel = function(isModified) {\n\t\t\tvar self = this;\n\t\t\tself.disableSelection = false;\n\t\t\tif (isModified && self.transactionName !== 'EditBeneficiary') {\n\t\t\t\tself.loadContacts().success(function(data) {\n\t\t\t\t\tif (self.currentContact) {\n\t\t\t\t\t\tself.selectContact(self.currentContact, isModified);\n\t\t\t\t\t\tself.moduleState = 'contactsView';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (self.currentContact) {\n\t\t\t\t\tself.selectContact(self.currentContact, isModified);\n\t\t\t\t\tself.moduleState = 'contactsView';\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Find a contact by name.\n\t\t *\n\t\t * @param method\n\t\t */\n\t\tContactsModel.prototype.findByName = function(name) {\n\t\t\treturn lpCoreUtils.find(this.contacts, {\n\t\t\t\tname: name\n\t\t\t});\n\t\t};\n\n\t\treturn ContactsModel;\n\t};\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./scripts/model.js\n// module id = 5\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"idfccommon\"\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"idfcerror\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jquery\"\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}